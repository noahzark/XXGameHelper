package xxgamehelper.framework.model.core;

import java.util.List;
import java.util.Random;
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;

import xxgamehelper.framework.control.messenger.Messenger;
import xxgamehelper.framework.utils.CoreEntityUtils;

/***
 * A sample of Core's implement to provide basic/default functions.
 * @author LongFangzhou
 * @version 0.3
 */
public abstract class DefaultCore extends Core {

	/***
	 * The constructor to initialize with a web client and a messenger.
	 * @param webclient The client generated by connection class
	 * @param messenger The messenger to output messages
	 */
	public DefaultCore(Messenger messenger) {
		super(messenger);
		randomer = new Random();
	}
	
	public boolean preRequest(String remoteAddress) {
		if (this.host == null){
			this.messenger.showError("host is null");
			return false;
		}
		return true;
	}
	
	public boolean getPage(String remoteAddress, String fileName) {
		if (this.preRequest(remoteAddress)){
			HttpGet req = new HttpGet(remoteAddress);
			return webclient.saveRequestToFile(host, req, fileName);
		}
		return false;
	}
	
	public boolean postPage(String remoteAddress, List<NameValuePair> formParams, String fileName){
		if (this.preRequest(remoteAddress)){
			HttpPost req = new HttpPost(remoteAddress);
			HttpEntity entity = CoreEntityUtils.generateEntity(formParams);
			req.setEntity(entity);
			return webclient.saveRequestToFile(host, req, fileName);
		}
		return false;
	}
	
	public void updateToken() {
		this.messenger.setVerifyToken(this.randomer.nextLong());
	}
	
	private long generateRestTime(int basicRestTime, int extraRestTime){
		if (extraRestTime<=0) {
			this.messenger.showWarning("extra rest time is illegal, use default");
			extraRestTime = 30;
		}
		basicRestTime += randomer.nextInt(extraRestTime);
		return basicRestTime;
	}
	
	public void rest() {
		try {
			long t = 0;
			t = this.generateRestTime(this.basicRestTime, this.extraRestTime);
			this.messenger.pauseHelper(t);
		} catch (InterruptedException e) {
			this.messenger.println("The rest is interrupted");
		}
	}
	
	@Override
	public void run() {
		try {
			this.initGame();
			while (!this.isExitFlag()){
				this.updateToken();
				try {
					this.runGame();
					if (!this.isExitFlag())
						this.rest();
				} catch (Exception e) {
					this.messenger.showError(e);
					break;
				}
				this.cleanFiles();
			}
			this.postGame();
		} catch (Exception e) {
			this.messenger.showError(e);
		}
	}
	
	@Override
	public void postGame() {
	}
}
