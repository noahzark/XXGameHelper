package xxgamehelper.framework.model;

import java.util.Random;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import xxgamehelper.framework.control.Messenger;

/***
 * A sample of Core's implement to provide basic/default functions.
 * @author LongFangzhou
 * @version 0.3
 */
public abstract class DefaultCore extends Core {

	/***
	 * The constructor to initialize with a web client and a messenger.
	 * @param webclient The client generated by connection class
	 * @param messenger The messenger to output messages
	 */
	public DefaultCore(WebClient webclient, Messenger messenger) {
		this.webclient = webclient;
		this.messenger = messenger;
		randomer = new Random();
	}
	
	public boolean preRequest(String remoteAddress) {
		if (this.host == null){
			this.messenger.showError("host is null");
			return false;
		}
		return true;
	}
	
	public boolean getPage(String remoteAddress, String fileName) {
		if (this.preRequest(remoteAddress)){
			HttpGet req = new HttpGet(remoteAddress);
			return webclient.saveRequestToFile(host, req, fileName);
		}
		return false;
	}
	
	public boolean postPage(String remoteAddress, HttpEntity entity, String fileName){
		if (this.preRequest(remoteAddress)){
			HttpPost req = new HttpPost(remoteAddress);
			req.setEntity(entity);
			return webclient.saveRequestToFile(host, req, fileName);
		}
		return false;
	}
	
	public void updateToken() {
		this.messenger.setVerifyToken(this.randomer.nextLong());
	}
	
	private long generateRestTime(int basicRestTime, int extraRestTime){
		basicRestTime += randomer.nextInt(extraRestTime);
		return basicRestTime;
	}
	
	public void rest() {
		try {
			long t = 0;
			t = this.generateRestTime(5,5);
			this.messenger.pauseGame(t);
		} catch (InterruptedException e) {
			this.messenger.println("The rest is interrupted");
		}
	}
	
	@Override
	public void run() {
		try {
			this.initGame();
			while (!this.isExitFlag()){
				this.updateToken();
				this.runGame();
				if (!this.isExitFlag())
					this.rest();
				this.cleanFiles();
			}
		} catch (Exception e) {
			this.messenger.showError(e);
		}
	}
}
