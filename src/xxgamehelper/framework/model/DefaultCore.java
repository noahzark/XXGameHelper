package xxgamehelper.framework.model;

import java.io.File;
import java.io.FilenameFilter;
import java.util.Date;
import java.util.Random;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import xxgamehelper.framework.control.Messenger;

/***
 * A sample of Core's implement to provide basic/default functions.
 * @author LongFangzhou
 * @version 0.3
 */
public abstract class DefaultCore extends Core {

	/***
	 * The constructor to initialize with a web client and a messenger.
	 * @param webclient The client generated by connection class
	 * @param messenger The messenger to output messages
	 */
	public DefaultCore(WebClient webclient, Messenger messenger) {
		this.webclient = webclient;
		this.messenger = messenger;
		randomer = new Random();
	}
	
	public boolean preRequest(String remoteAddress) {
		if (this.messenger.isDebugMode())
			this.messenger.println((new Date()) + " Now loading:\n"
					+ remoteAddress);
		
		if (this.host == null){
			this.messenger.showError("host is null");
			return false;
		}
		return true;
	}
	
	public boolean getPage(String remoteAddress, String fileName) {
		if (this.preRequest(remoteAddress)){
			HttpGet req = new HttpGet(remoteAddress);
			return webclient.saveRequestToFile(host, req, fileName);
		}
		return false;
	}
	
	public boolean postPage(String remoteAddress, HttpEntity entity, String fileName){
		if (this.preRequest(remoteAddress)){
			HttpPost req = new HttpPost(remoteAddress);
			req.setEntity(entity);
			return webclient.saveRequestToFile(host, req, fileName);
		}
		return false;
	}

	public void clearFiles(String workPath,String[] fileTypes) {
		File f = new File(workPath);
		for (String fileType : fileTypes){
			final String tempStr = fileType;
			FilenameFilter ff = new FilenameFilter(){
				public boolean accept(File arg0, String filename) {
					if (filename.toLowerCase().endsWith(tempStr))
						return true;
					else
						return false;        
				}
			};
			File[] files = f.listFiles(ff);
			for (int i=0;i<files.length;i++)
				files[i].delete();
		}
	}
	
	@Override
	public void run() {
		this.initGame();
		while (!this.isExitFlag()){
			this.runGame();
		}
	}
}
