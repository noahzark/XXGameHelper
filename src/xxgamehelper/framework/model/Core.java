package xxgamehelper.framework.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.GZIPInputStream;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.util.EntityUtils;

import xxgamehelper.framework.control.Messenger;

/***
 * The core class should provide a constructor initialize with web client.
 * @author LongFangzhou
 */
public abstract class Core extends CoreData implements CoreInterface{
	public static final int BUFFERSIZE = 8192;

	/***
	 * The constructor to initialize with a web client.
	 * @param webclient The client generated by connection class
	 */
	public Core(WebClient webclient, Messenger messenger) {
		this.setWebclient(webclient);
		this.setMessenger(messenger);
	}
	
	public boolean getPage(String remoteAddress, String fileName) {
		HttpGet req = new HttpGet(remoteAddress);
		if (this.messenger.isDebugMode())
			this.messenger.println("Now loading:" + remoteAddress);
		
		if (this.host == null){
			this.messenger.showError("host is null");
			return false;
		}
		
		HttpEntity entity = null;
		try{
			HttpResponse rsp = webclient.execute(host, req);
			
			entity = rsp.getEntity();
			if (entity != null) {
				Header[] headers = rsp.getHeaders("Content-Encoding");
				InputStream is = null;
				if (headers.length>0)
					is = new GZIPInputStream(entity.getContent());
				else
					is = entity.getContent();
				FileOutputStream fos = new FileOutputStream(new File(fileName));
				byte[] b = new byte[Core.BUFFERSIZE];
				int len = 0;
				while((len=is.read(b))!=-1)
					fos.write(b,0,len);
				fos.close();
			}
		} catch(Exception e){
			this.messenger.showError(e);
			return false;
		} finally{
			try {
				if (entity!=null)
					EntityUtils.consume(entity);
			} catch (IOException e) {
			}
		}
		return true;
	}
	
	public boolean postPage(String remoteAddress, HttpEntity httpEntity, String fileName){
		HttpPost req = new HttpPost(remoteAddress);
		req.setEntity(httpEntity);
		if (this.messenger.isDebugMode())
			this.messenger.println("Now loading:" + remoteAddress);

		if (this.host == null){
			this.messenger.showError("host is null");
			return false;
		}
		
		HttpEntity entity = null;
		try{
			HttpResponse rsp = webclient.execute(host, req);
			
			entity = rsp.getEntity();
			if (entity != null) {
				Header[] headers = rsp.getHeaders("Content-Encoding");
				InputStream is = null;
				if (headers.length>0)
					is = new GZIPInputStream(entity.getContent());
				else
					is = entity.getContent();
				FileOutputStream fos = new FileOutputStream(new File(fileName));
				byte[] b = new byte[Core.BUFFERSIZE];
				int len = 0;
				while((len=is.read(b))!=-1)
					fos.write(b,0,len);
				fos.close();
			}
		} catch(Exception e){
			this.messenger.showError(e);
			return false;
		} finally{
			try {
				if (entity!=null)
					EntityUtils.consume(entity);
			} catch (IOException e) {
			}
		}
		return true;
	}

}
